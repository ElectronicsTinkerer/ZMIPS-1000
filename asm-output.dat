                                           // ; Test data file
000000_00000_00000_00000_00000_000000      // nop
000000_00000_00000_00000_00000_000000      // nop
000000_00000_00000_00000_00000_000000      // nop
010101_00000000000000000000000000          // li 0
000101_00000_00000_11101_00000_000000      // mov r29, r0
010101_00000000000100000000000000          // li 0x4000            ; Half of video memory
000101_00000_00000_00010_00000_000000      // mov r2, r0
010101_00000000000000000000000000          // li 0
000101_00000_00000_00001_00000_000000      // mov r1, r0          ; i = 0
                                           // :loop_start
11_000000000000000000000000010011          // jpl mul
000011_00000_00000_00000_00000_000010      // ffl c               ; Set carry
000100_00001_11101_00001_00000_000000      // add r1, r1, r29     ; i += 1
001001_00001_00001_00000_00000_000000      // sw r1, r1           ; mem[i] = 0
000000_00010_00001_00000_00000_001100      // cmp r2, r1, Z       ; Count == 0x2000?
100000_11111111111111111111111010          // bfc z, loop_start   ; No, keep going
010101_11111111111111111111111111          // li 0xffffffff
001001_00010_00000_00000_00000_000000      // sw r2, r0
                                           // :spin
11_000000000000000000000000010001          // jpl spin           ; Spin
                                           // ; Args:
                                           // ;   r20 - X posiiton
                                           // ;   r21 - Y position
                                           // ;   r22 - Base address of sprite data
                                           // :draw_sprite
                                           // ; calculate line
                                           // ; y * 0x40
010101_11111111111111111111111111          // li 0xffffffff
                                           // ; Multiply two numbers
                                           // ; Args:
                                           // ;   R20 - X
                                           // ;   R21 - Y
                                           // ; Return:
                                           // ;   R20 = X * Y
                                           // :mul
000101_10100_00000_00000_00000_000100      // mov r0, r20, Z  ; If Z ==
000000_11110_00000_00000_00000_111111      // jmp R30 ; Return jump test
