DEPTH = 21; -- Memory size in words
WIDTH = 32; -- Data width in bits
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
                                        -- ; Test data file
   0 : 00000000000000000000000000000000;    -- nop
   1 : 00000000000000000000000000000000;    -- nop
   2 : 00000000000000000000000000000000;    -- nop
   3 : 01010100000000000000000000000000;    -- li 0
   4 : 00010100000000001110100000000000;    -- mov r29, r0
   5 : 01010100000000000100000000000000;    -- li 0x4000            ; Half of video memory
   6 : 00010100000000000001000000000000;    -- mov r2, r0
   7 : 01010100000000000000000000000000;    -- li 0
   8 : 00010100000000000000100000000000;    -- mov r1, r0          ; i = 0
                                        -- :loop_start
   9 : 11000000000000000000000000010011;    -- jpl mul
   a : 00001100000000000000000000000010;    -- ffl c               ; Set carry
   b : 00010000001111010000100000000000;    -- add r1, r1, r29     ; i += 1
   c : 00100100001000010000000000000000;    -- sw r1, r1           ; mem[i] = 0
   d : 00000000010000010000000000001100;    -- cmp r2, r1, Z       ; Count == 0x2000?
   e : 10000011111111111111111111111010;    -- bfc z, loop_start   ; No, keep going
   f : 01010111111111111111111111111111;    -- li 0xffffffff
  10 : 00100100010000000000000000000000;    -- sw r2, r0
                                        -- :spin
  11 : 11000000000000000000000000010001;    -- jpl spin           ; Spin
                                        -- ; Args:
                                        -- ;   r20 - X posiiton
                                        -- ;   r21 - Y position
                                        -- ;   r22 - Base address of sprite data
                                        -- :draw_sprite
                                        -- ; calculate line
                                        -- ; y * 0x40
  12 : 01010111111111111111111111111111;    -- li 0xffffffff
                                        -- ; Multiply two numbers
                                        -- ; Args:
                                        -- ;   R20 - X
                                        -- ;   R21 - Y
                                        -- ; Return:
                                        -- ;   R20 = X * Y
                                        -- :mul
  13 : 00010110100000000000000000000100;    -- mov r0, r20, Z  ; If Z ==
  14 : 00000011110000000000000000111111;    -- jmp R30 ; Return jump test
END;
